{"version":3,"sources":["webpack://SPACEGL/webpack/bootstrap","webpack://SPACEGL/./src/build/Babylon/BabylonMeshExporter.js","webpack://SPACEGL/./src/build/Babylon/index.js","webpack://SPACEGL/./src/build/Color.js","webpack://SPACEGL/./src/build/Events.js","webpack://SPACEGL/./src/build/Geometry/Mesh.js","webpack://SPACEGL/./src/build/Geometry/MeshFactory.js","webpack://SPACEGL/./src/build/Geometry/MeshProcessor.js","webpack://SPACEGL/./src/build/Geometry/index.js","webpack://SPACEGL/./src/build/Math.js","webpack://SPACEGL/./src/build/Space/AxialTilt.js","webpack://SPACEGL/./src/build/Space/ICelestialObject.js","webpack://SPACEGL/./src/build/Space/SpectralClass.js","webpack://SPACEGL/./src/build/Space/StarColor.js","webpack://SPACEGL/./src/build/Space/index.js","webpack://SPACEGL/./src/build/Units.js","webpack://SPACEGL/./src/build/index.js"],"names":[],"mappings":";;QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iEAAiE;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+C;;;;;;;;;;;;ACpBA;AAAA;AAAA;AAAA;AAAsC;AACtC,iC;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;;;;;;;;;;;;ACtFA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kC;;;;;;;;;;;;ACtKA;AAAU;AACV,gC;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAgD;AACzC;AACP;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,wCAAwC;AAClC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C,sCAAsC;AACtC;AACA;AACA,mBAAmB;AACnB,mBAAmB;AACnB,wBAAwB;AACxB,kCAAkC;AAClC;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE;AACpE;AACA;AACA;AACA;AACA,wBAAwB,UAAU;AAClC;AACA;AACA;AACA,yBAAyB,4DAAa;AACtC,yBAAyB,4DAAa;AACtC,6DAA6D,4DAAa;AAC1E;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA,+BAA+B,qBAAqB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uC;;;;;;;;;;;;AC1JA;AAAA;AAAA;AAAmC;AAC5B;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,QAAQ;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C,wBAAwB,4CAAM,6BAA6B;AAC3D,wBAAwB,4CAAM,6BAA6B;AAC3D,kDAAkD;AAClD;AACA,wBAAwB,4CAAM,6BAA6B;AAC3D,wBAAwB,4CAAM,6BAA6B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yC;;;;;;;;;;;;AC9EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuB;AACO;AACE;AAChC,iC;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,gC;;;;;;;;;;;;ACnDA;AAAA;AAAA;AAA6C;AACtC;AACP;AACA,8BAA8B,4CAAK;AACnC,2BAA2B,+CAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,4CAAK;AAClC,8BAA8B,+CAAQ;AACtC,qC;;;;;;;;;;;;AClBA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8CAA8C;AAC/C,4C;;;;;;;;;;;;AClBA;AAAA;AAAA;AAAA;AAA0F;AACnF;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kDAAW,cAAc,kDAAW;AAC3D;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,oDAAE,KAAK,kDAAW,QAAQ,kDAAW,eAAe,kDAAW,QAAQ,kDAAW,gCAAgC,oDAAE,KAAK,2CAAI,KAAK,2CAAI,iBAAiB,oDAAE,KAAK,+CAAQ,MAAM,+CAAQ,iBAAiB,oDAAE,KAAK,iDAAU,QAAQ,iDAAU;AACrR,6CAA6C,oDAAE,KAAK,kDAAW,QAAQ,kDAAW,eAAe,kDAAW,QAAQ,kDAAW,iDAAiD,oDAAE,KAAK,2CAAI,MAAM,2CAAI,gBAAgB,2CAAI,KAAK,2CAAI,iBAAiB,oDAAE,KAAK,+CAAQ,MAAM,+CAAQ,gBAAgB,+CAAQ,MAAM,+CAAQ,iBAAiB,oDAAE,KAAK,iDAAU,KAAK,iDAAU,kBAAkB,iDAAU,QAAQ,iDAAU;AACrZ,6CAA6C,oDAAE,KAAK,kDAAW,OAAO,kDAAW,eAAe,kDAAW,QAAQ,kDAAW,uCAAuC,oDAAE,KAAK,2CAAI,MAAM,2CAAI,gBAAgB,2CAAI,MAAM,2CAAI,iBAAiB,oDAAE,KAAK,+CAAQ,MAAM,+CAAQ,gBAAgB,+CAAQ,MAAM,+CAAQ,iBAAiB,oDAAE,KAAK,iDAAU,IAAI,iDAAU,kBAAkB,iDAAU,KAAK,iDAAU;AACvY,6CAA6C,oDAAE,KAAK,kDAAW,OAAO,kDAAW,eAAe,kDAAW,OAAO,kDAAW,yCAAyC,oDAAE,KAAK,2CAAI,OAAO,2CAAI,gBAAgB,2CAAI,MAAM,2CAAI,iBAAiB,oDAAE,KAAK,+CAAQ,OAAO,+CAAQ,gBAAgB,+CAAQ,MAAM,+CAAQ,iBAAiB,oDAAE,KAAK,iDAAU,MAAM,iDAAU,kBAAkB,iDAAU,IAAI,iDAAU;AAC3Y,6CAA6C,oDAAE,KAAK,kDAAW,OAAO,kDAAW,eAAe,kDAAW,OAAO,kDAAW,yCAAyC,oDAAE,KAAK,2CAAI,MAAM,2CAAI,gBAAgB,2CAAI,OAAO,2CAAI,iBAAiB,oDAAE,KAAK,+CAAQ,OAAO,+CAAQ,gBAAgB,+CAAQ,OAAO,+CAAQ,iBAAiB,oDAAE,KAAK,iDAAU,MAAM,iDAAU,kBAAkB,iDAAU,MAAM,iDAAU;AAC9Y,6CAA6C,oDAAE,KAAK,kDAAW,OAAO,kDAAW,eAAe,kDAAW,OAAO,kDAAW,+CAA+C,oDAAE,KAAK,2CAAI,OAAO,2CAAI,gBAAgB,2CAAI,MAAM,2CAAI,iBAAiB,oDAAE,KAAK,+CAAQ,MAAM,+CAAQ,gBAAgB,+CAAQ,OAAO,+CAAQ,iBAAiB,oDAAE,KAAK,iDAAU,OAAO,iDAAU,kBAAkB,iDAAU,MAAM,iDAAU;AACpZ,6CAA6C,oDAAE,KAAK,kDAAW,OAAO,kDAAW,eAAe,kDAAW,OAAO,kDAAW,2CAA2C,oDAAE,KAAK,2CAAI,OAAO,2CAAI,gBAAgB,2CAAI,OAAO,2CAAI,iBAAiB,oDAAE,WAAW,+CAAQ,MAAM,+CAAQ,iBAAiB,oDAAE,WAAW,iDAAU,MAAM,iDAAU;AACzU;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,oDAAE,KAAK,kDAAW,OAAO,kDAAW,eAAe,kDAAW,QAAQ,kDAAW;AACtH,yC;;;;;;;;;;;;AChGA;AAAA;AAAA;AAAA;AAAA;AAAmE;AAC1B;AACF;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,sBAAsB,gEAAiB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gEAAiB;AACrC;AACA;AACA,yBAAyB,4DAAa;AACtC,qBAAqB,aAAa;AAClC,qBAAqB,UAAU;AAC/B,uBAAuB;AACvB;AACA;AACA,+BAA+B,gDAAS;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,kDAAW,cAAc,kDAAW;AAC7D;AACA;AACA,uBAAuB,gDAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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,iEAAiE,EAAE;AAC9F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,uBAAuB,gEAAgE,EAAE;AAC9F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,uBAAuB,gEAAgE,EAAE;AAC9F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,gEAAgE,EAAE;AAC5F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,gEAAgE,EAAE;AAC5F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,gEAAgE,EAAE;AAC5F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,gEAAgE,EAAE;AAC5F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,gEAAgE,EAAE;AAC5F,KAAK,qBAAqB,gEAAgE,EAAE;AAC5F,KAAK,qBAAqB,gEAAgE,EAAE;AAC5F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,gEAAgE,EAAE;AAC5F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,gEAAgE,EAAE;AAC5F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,gEAAgE,EAAE;AAC5F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,iEAAiE,EAAE;AAC7F,KAAK,qBAAqB,iEAAiE;AAC3F;AACA;AACA;AACA,qC;;;;;;;;;;;;AC7SA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmC;AACH;AACJ;AACA;AAC5B,iC;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuC;AAChmDAAa;AAChD;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,qEAAqE;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,qEAAqE;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,qEAAqE;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;;;;;;;;;;;;ACrTA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyB;AACF;AACC;AACA;AACS;AACH;AACE;AAChC,iC","file":"space.1.0.0.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/build/index.js\");\n","export class BabylonMeshExporter {\r\n    exportMesh(shape, target) {\r\n        var normals = shape.normals || [];\r\n        if (!normals || !normals.length) {\r\n            BABYLON.VertexData.ComputeNormals(shape.vertices, shape.indices, normals);\r\n        }\r\n        target.setVerticesData(BABYLON.VertexBuffer.PositionKind, shape.vertices, true);\r\n        target.setVerticesData(BABYLON.VertexBuffer.NormalKind, normals, true);\r\n        if (shape.uvs && shape.uvs.length > 0) {\r\n            for (let i = 0; i != shape.uvs.length && i < BabylonMeshExporter.UVKinds.length; i++) {\r\n                if (shape.uvs[i]) {\r\n                    target.setVerticesData(BabylonMeshExporter.UVKinds[i], shape.uvs[i], true);\r\n                }\r\n            }\r\n        }\r\n        target.setIndices(shape.indices);\r\n        return target;\r\n    }\r\n}\r\nBabylonMeshExporter.UVKinds = [BABYLON.VertexBuffer.UVKind, BABYLON.VertexBuffer.UV2Kind, BABYLON.VertexBuffer.UV3Kind, BABYLON.VertexBuffer.UV4Kind, BABYLON.VertexBuffer.UV5Kind, BABYLON.VertexBuffer.UV6Kind];\r\n//# sourceMappingURL=BabylonMeshExporter.js.map","export * from \"./BabylonMeshExporter\";\r\n//# sourceMappingURL=index.js.map","export class RGBAColor {\r\n    constructor(r, g, b, a = 1) {\r\n        this.r = r;\r\n        this.g = g;\r\n        this.b = b;\r\n        this.a = a;\r\n    }\r\n    toHSL() {\r\n        var r = this.r / 255;\r\n        var g = this.g / 255;\r\n        var b = this.b / 255;\r\n        var max = Math.max(r, g, b), min = Math.min(r, g, b);\r\n        var h, s, l = (max + min) / 2;\r\n        if (max == min) {\r\n            h = s = 0; // achromatic\r\n        }\r\n        else {\r\n            var d = max - min;\r\n            s = (l > 0.5 ? d / (2 - max - min) : d / (max + min));\r\n            switch (max) {\r\n                case r:\r\n                    h = (g - b) / d + (g < b ? 6 : 0);\r\n                    break;\r\n                case g:\r\n                    h = (b - r) / d + 2;\r\n                    break;\r\n                case b:\r\n                    h = (r - g) / d + 4;\r\n                    break;\r\n            }\r\n            h /= 6;\r\n        }\r\n        return new HSLColor(h, s, l);\r\n    }\r\n    interpolate(color, t, keepAlpha = true) {\r\n        t = t || .5;\r\n        let r = Math.round(this.r + t * (color.r - this.r));\r\n        let g = Math.round(this.g + t * (color.g - this.g));\r\n        let b = Math.round(this.b + t * (color.b - this.b));\r\n        let a = keepAlpha ? this.a : Math.round(this.a + t * (color.a - this.a));\r\n        return new RGBAColor(r, g, b, a);\r\n    }\r\n    interpolateInPlace(color, t, keepAlpha = true) {\r\n        t = t || .5;\r\n        this.r = Math.round(this.r + t * (color.r - this.r));\r\n        this.g = Math.round(this.g + t * (color.g - this.g));\r\n        this.b = Math.round(this.b + t * (color.b - this.b));\r\n        this.a = keepAlpha ? this.a : Math.round(this.a + t * (color.a - this.a));\r\n        return this;\r\n    }\r\n}\r\nexport class HSLColor {\r\n    constructor(h, s, l) {\r\n        this.h = h;\r\n        this.s = s;\r\n        this.l = l;\r\n    }\r\n    static hue2rgb(p, q, t) {\r\n        if (t < 0)\r\n            t += 1;\r\n        if (t > 1)\r\n            t -= 1;\r\n        if (t < 1 / 6)\r\n            return p + (q - p) * 6 * t;\r\n        if (t < 1 / 2)\r\n            return q;\r\n        if (t < 2 / 3)\r\n            return p + (q - p) * (2 / 3 - t) * 6;\r\n        return p;\r\n    }\r\n    toRGB() {\r\n        var l = this.l;\r\n        if (this.s === 0) {\r\n            l = Math.round(l * 255);\r\n            return new RGBAColor(l, l, l);\r\n        }\r\n        var s = this.s;\r\n        var q = (l < 0.5 ? l * (1 + s) : l + s - l * s);\r\n        var p = 2 * l - q;\r\n        var r = HSLColor.hue2rgb(p, q, this.h + 1 / 3);\r\n        var g = HSLColor.hue2rgb(p, q, this.h);\r\n        var b = HSLColor.hue2rgb(p, q, this.h - 1 / 3);\r\n        return new RGBAColor(Math.round(r * 255), Math.round(g * 255), Math.round(b * 255));\r\n    }\r\n    ;\r\n}\r\n//# sourceMappingURL=Color.js.map","export class EventEmitter {\r\n    constructor() {\r\n        this._events = new Map();\r\n        this._maxListeners = null;\r\n    }\r\n    addListener(eventName, listener, closure) {\r\n        this._registerEvent(eventName, listener, closure);\r\n        return this;\r\n    }\r\n    on(eventName, listener, closure) {\r\n        this._registerEvent(eventName, listener, closure);\r\n        return this;\r\n    }\r\n    once(eventName, listener, closure) {\r\n        var l = this._createOnceListener(listener, eventName, closure);\r\n        this._registerEvent(eventName, l, closure);\r\n        return this;\r\n    }\r\n    emit(eventName, ...args) {\r\n        let listeners = this._events.get(eventName);\r\n        if (listeners) {\r\n            let i = 0;\r\n            let l = listeners.length;\r\n            if (i < l) {\r\n                do {\r\n                    var listener = listeners[i++];\r\n                    var object = listeners[i++] || this;\r\n                    if (listener) {\r\n                        listener.call(object, ...args);\r\n                    }\r\n                } while (i < l);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    eventNames() {\r\n        return Array.from(this._events.keys());\r\n    }\r\n    get maxListeners() {\r\n        return this._maxListeners === null ? EventEmitter.defaultMaxListeners : this._maxListeners;\r\n    }\r\n    set maxListeners(limit) {\r\n        this._maxListeners = limit;\r\n    }\r\n    *listeners(eventName, closure) {\r\n        let listeners = this._events.get(eventName);\r\n        if (listeners) {\r\n            if (!closure) {\r\n                return listeners;\r\n            }\r\n            let i = 0;\r\n            let l = listeners.length;\r\n            if (i < l) {\r\n                do {\r\n                    var listener = listeners[i++];\r\n                    if (listeners[i++] === closure) {\r\n                        return yield listener;\r\n                    }\r\n                } while (i < l);\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n    listenerCount(eventName) {\r\n        let listeners = this._events.get(eventName);\r\n        return listeners ? listeners.length / 2 : 0;\r\n    }\r\n    removeAllListeners(eventNames, closure) {\r\n        if (!eventNames) {\r\n            eventNames = Array.from(this._events.keys());\r\n        }\r\n        eventNames.forEach(eventName => this._removeAllListeners(eventName, closure));\r\n        return this;\r\n    }\r\n    _removeAllListeners(eventName, closure) {\r\n        let listeners = this._events.get(eventName);\r\n        if (listeners) {\r\n            if (!closure) {\r\n                this._events.delete(eventName);\r\n                return;\r\n            }\r\n            let i = 0;\r\n            let l = listeners.length;\r\n            let count = 0;\r\n            if (i < l) {\r\n                do {\r\n                    var listener = listeners[i];\r\n                    if (listeners[i + 1] === closure) {\r\n                        // we remove the items.\r\n                        listeners.splice(i, 2);\r\n                        continue;\r\n                    }\r\n                    i += 2;\r\n                } while (i < l);\r\n            }\r\n        }\r\n    }\r\n    removeListener(eventName, listener, closure) {\r\n        let listeners = this._events.get(eventName);\r\n        if (listeners) {\r\n            let i = 0;\r\n            let l = listeners.length;\r\n            let count = 0;\r\n            if (i < l) {\r\n                do {\r\n                    var tmp = listeners[i];\r\n                    if (tmp === listener) {\r\n                        if (!closure || listeners[i + 1] === closure) {\r\n                            // we remove the items.\r\n                            listeners.splice(i, 2);\r\n                            continue;\r\n                        }\r\n                    }\r\n                    i += 2;\r\n                } while (i < l);\r\n                if (listeners.length === 0) {\r\n                    this._events.delete(eventName);\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    prependListener(eventName, listener, closure) {\r\n        if (this._ListenerLimitReached(eventName)) {\r\n            console.log(\"Maximum listener reached, new Listener not added\");\r\n            return;\r\n        }\r\n        let listeners = this._events.get(eventName);\r\n        if (!listeners) {\r\n            listeners = [listener, closure];\r\n            this._events.set(eventName, listeners);\r\n            return this;\r\n        }\r\n        listeners.unshift(listener, closure);\r\n    }\r\n    prependOnceListener(eventName, listener, closure) {\r\n        var l = this._createOnceListener(listener, eventName, closure);\r\n        this.prependListener(eventName, l, closure);\r\n        return this;\r\n    }\r\n    _registerEvent(eventName, listener, closure) {\r\n        if (this._ListenerLimitReached(eventName)) {\r\n            console.log(\"Maximum listener reached, new Listener not added\");\r\n            return;\r\n        }\r\n        let listeners = this._events.get(eventName);\r\n        if (!listeners) {\r\n            listeners = [listener, closure];\r\n            this._events.set(eventName, listeners);\r\n            return;\r\n        }\r\n        listeners.push(listener, closure);\r\n    }\r\n    _createOnceListener(listener, eventName, closure) {\r\n        let newListener = (...args) => {\r\n            this.removeListener(eventName, listener);\r\n            return listener(...args);\r\n        };\r\n        return newListener;\r\n    }\r\n    _ListenerLimitReached(eventName) {\r\n        return this.listenerCount(eventName) === this.maxListeners ? true : false;\r\n    }\r\n}\r\nEventEmitter.defaultMaxListeners = 10;\r\n//# sourceMappingURL=Events.js.map","export {};\r\n//# sourceMappingURL=Mesh.js.map","import { MeshProcessor } from './MeshProcessor';\r\nexport var PlatonicSolids;\r\n(function (PlatonicSolids) {\r\n    PlatonicSolids[PlatonicSolids[\"tetrahedron\"] = 0] = \"tetrahedron\";\r\n    PlatonicSolids[PlatonicSolids[\"hexaedron\"] = 1] = \"hexaedron\";\r\n    PlatonicSolids[PlatonicSolids[\"octahedron\"] = 2] = \"octahedron\";\r\n    PlatonicSolids[PlatonicSolids[\"dodecahedron\"] = 3] = \"dodecahedron\";\r\n    PlatonicSolids[PlatonicSolids[\"icosahedron\"] = 4] = \"icosahedron\";\r\n})(PlatonicSolids || (PlatonicSolids = {}));\r\nexport class MeshFactory {\r\n    /* The following mesh is based on the treatment in Geometric Tools for Computer Graphics (Morgan Kaufmann 2003) chapter 9.3.6 p 346-350\r\n       The following subsections provide vertex-face tables for the Platonic solids. The\r\n       polyhedron is centered at the origin and the vertices are all unit length. The face\r\n       connectivity is provided as a list of indices into the vertex array. The vertices of a face\r\n       are counterclockwise ordered as you look at the face from outside the polyhedron.\r\n       The faces for the tetrahedron, octahedron, and icosahedron are already triangles. The\r\n       faces for the hexahedron are squares, and the faces for the dodecahedron are pentagons.\r\n       In these two cases, a vertex-triangle table is also provided for those renderers\r\n       that support only triangle faces.*/\r\n    static CreateTetrahedron(shape) {\r\n        let a = Math.sqrt(2) / 3;\r\n        let b = Math.sqrt(6) / 3;\r\n        let c = -1 / 3;\r\n        shape.vertices = [0, 1, 0, b, c, -a, 0, c, 2 * a, -b, c, -a];\r\n        shape.indices = [0, 1, 2, 0, 2, 3, 0, 3, 1, 1, 3, 2];\r\n        return shape;\r\n    }\r\n    static CreateHexahedron(shape) {\r\n        let i = 1 / Math.sqrt(3);\r\n        shape.vertices = [-i, -i, -i, -i, -i, i, i, -i, i, i, -i, -i, -i, i, -i, -i, i, i, i, i, i, i, i, -i];\r\n        shape.indices = [0, 3, 2, 0, 2, 1, 0, 1, 5, 0, 5, 4, 0, 4, 7, 0, 7, 3, 6, 5, 1, 6, 1, 2, 6, 2, 3, 6, 3, 7, 6, 7, 4, 6, 4, 5];\r\n        return shape;\r\n    }\r\n    static CreateOctahedron(shape) {\r\n        shape.vertices = [0, 0, 1, 0, 0, -1, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0];\r\n        shape.indices = [4, 0, 2, 4, 2, 1, 4, 1, 3, 4, 3, 0, 5, 2, 0, 5, 1, 2, 5, 3, 1, 5, 0, 3];\r\n        return shape;\r\n    }\r\n    static CreateDodecahedron(shape) {\r\n        let a = 1 / Math.sqrt(3);\r\n        let b = Math.sqrt((3 - Math.sqrt(5)) / 6);\r\n        let c = Math.sqrt((3 + Math.sqrt(5)) / 6);\r\n        shape.vertices = [a, a, a, a, -a, a, -a, a, a, -a, -a, a, a, a, -a, a, -a, -a, -a, a, -a, -a, -a, -a, c, 0, b, c, 0, -b, -c, 0, b, -c, 0, -b, 0, b, c, 0, -b, c, 0, b, -c, 0, -b, -c, b, c, 0, -b, c, 0, b, -c, 0, -b, -c, 0];\r\n        shape.indices = [0, 8, 9, 0, 12, 13, 0, 16, 17, 8, 1, 18, 12, 2, 10, 16, 4, 14, 9, 5, 15, 6, 11, 10, 3, 19, 18, 7, 15, 5, 7, 11, 6, 7, 19, 3, 0, 9, 4, 0, 13, 1, 0, 17, 2, 8, 18, 5, 12, 10, 3,\r\n            16, 14, 6, 9, 15, 14, 6, 10, 2, 3, 18, 1, 7, 5, 18, 7, 6, 14, 7, 3, 10, 0, 4, 16, 0, 1, 8, 0, 2, 12, 9, 5, 9, 12, 3, 13, 16, 6, 17, 9, 14, 4, 6, 2, 17, 3, 1, 13, 7, 18, 19, 7, 14, 15, 7, 10, 11];\r\n        return shape;\r\n    }\r\n    static CreateIcosahedron(shape) {\r\n        let a = (1 + Math.sqrt(5)) / 2;\r\n        let b = Math.sqrt(1 + a * a);\r\n        let t = a / b;\r\n        let i = 1 / b;\r\n        shape.vertices = [i, 0, t, i, 0, -t, -i, 0, t, -i, 0, -t, 0, t, i, 0, -t, i, 0, t, -i, 0, -t, -i, t, i, 0, -t, i, 0, t, -i, 0, -t, -i, 0];\r\n        shape.indices = [4, 8, 0, 10, 5, 0, 9, 4, 2, 5, 11, 2, 8, 6, 1, 7, 10, 1, 6, 9, 3, 11, 7, 3, 8, 10, 0, 10, 8, 1, 11, 9, 2, 3, 9, 11, 0, 2, 4, 2, 0, 5, 3, 1, 6, 1, 3, 7, 4, 6, 8, 6, 4, 9, 7, 5, 10, 5, 7, 11];\r\n        return shape;\r\n    }\r\n    /*\r\n        create dedicated icosahedron on left handed coordinate, Y up, with pole vertice (North and South) on the Y axis.\r\n        this polyhedron topoly is specific to accept square image mapping and vertices are duplicate to avoid mapping artifact.\r\n        North pole Y=radius is replaced by  [0,1,2,3,4]\r\n        South pole Y=-radius is replaced by [5,6,7,8,9]\r\n        vertice 10 and 16 are duplicate repectively by 15 and 21\r\n    */\r\n    static _createIcosphereBase(shape, radius) {\r\n        // constants\r\n        const H_ANGLE = (Math.PI / 180) * 72; /* 72 degree = 360 / 5 */\r\n        const V_ANGLE = Math.atan(.5); /* elevation = 26.565 degree */\r\n        const y = Math.sin(V_ANGLE);\r\n        const xz = Math.cos(V_ANGLE);\r\n        let v = []; /* array of 21 vertices (x,y,z) */\r\n        let n = []; /* array of 21 vertices (x,y,z) */\r\n        var hAngle1 = 0; /* start from 0 deg at 1st row */\r\n        var hAngle2 = H_ANGLE / 2; /* start from +36 deg at 2nd row */\r\n        /* the first top vertex at (0, r, 0). we use 5 vertices in order to isolate uv's coordinate for quad image texture */\r\n        for (var i = 0; i < 5; i++) {\r\n            v.push(0, radius, 0);\r\n            n.push(0, 1, 0);\r\n        }\r\n        /* the last ten bottom vertex at (0, -r, 0) */\r\n        for (; i < 10; i++) {\r\n            v.push(0, -radius, 0);\r\n            n.push(0, -1, 0);\r\n        }\r\n        /* compute 12 vertices at 1st and 2nd rows */\r\n        for (let k = 0; k < 6; i++, k++) {\r\n            /* rows 1 and 2 indexes */\r\n            let i1 = i * 3;\r\n            let i2 = i1 + 18;\r\n            let s = k * H_ANGLE;\r\n            let h1 = hAngle1 + s;\r\n            let h2 = hAngle2 + s;\r\n            /*x*/\r\n            let a = h1 == 0 ? xz : xz * Math.cos(h1);\r\n            let b = xz * Math.cos(h2);\r\n            n[i1] = a;\r\n            n[i2] = b;\r\n            v[i1++] = a * radius;\r\n            v[i2++] = b * radius;\r\n            /*y*/\r\n            n[i1] = y;\r\n            n[i2] = -y;\r\n            v[i1++] = y * radius;\r\n            v[i2++] = -y * radius;\r\n            /*z*/\r\n            a = h1 == 0 ? 0 : xz * Math.sin(h1);\r\n            b = xz * Math.sin(h2);\r\n            n[i1] = a;\r\n            n[i2] = b;\r\n            v[i1] = a * radius;\r\n            v[i2] = b * radius;\r\n        }\r\n        shape.vertices = v;\r\n        shape.normals = n;\r\n        shape.indices = [0, 10, 11, 1, 11, 12, 2, 12, 13, 3, 13, 14, 4, 14, 15,\r\n            10, 16, 11, 11, 16, 17, 11, 17, 12, 12, 17, 18, 12, 18, 13, 13, 18, 19, 13, 19, 14, 14, 19, 20, 14, 20, 15, 15, 20, 21,\r\n            16, 5, 17, 17, 6, 18, 18, 7, 19, 19, 8, 20, 20, 9, 21];\r\n        shape.uvs = [];\r\n        let a = 2 / 3;\r\n        let b = 1 / 3;\r\n        shape.uvs.push([/*north*/ .1, 1, .3, 1, .5, 1, .7, 1, .9, 1, /*south*/ .2, 0, .4, 0, .6, 0, .8, 0, 1, 0,\r\n            /* equatorial */ 0, a, .2, a, .4, a, .6, a, .8, a, 1, a, .1, b, .3, b, .5, b, .7, b, .9, b, 1.1, b]);\r\n        return shape;\r\n    }\r\n    static GreateGeodesicGrid(shape, radius, a = MeshFactory.DefaultSubdivisionLevelA) {\r\n        radius = Math.abs(radius || MeshFactory.DefaultRadius);\r\n        shape = shape = MeshFactory._createIcosphereBase(shape || {}, radius);\r\n        a = a === undefined ? MeshFactory.DefaultSubdivisionLevelA : Math.abs(a);\r\n        let n = shape.indices.length;\r\n        let map = {};\r\n        let newFaces = [];\r\n        for (let fi = 0; fi !== n;) {\r\n            let p0 = shape.indices[fi++];\r\n            let p1 = shape.indices[fi++];\r\n            let p2 = shape.indices[fi++];\r\n            let vedge0 = MeshProcessor.DivideEdge(shape, p1, p0, a, radius, map);\r\n            let vedge1 = MeshProcessor.DivideEdge(shape, p1, p2, a, radius, map);\r\n            let hedges = vedge0.map((value, index, array) => MeshProcessor.DivideEdge(shape, value, vedge1[index], index, radius, undefined));\r\n            let row0, row1;\r\n            for (let i = 0; i != a;) {\r\n                row0 = hedges[i++];\r\n                row1 = hedges[i];\r\n                newFaces.push(row1[0], row0[0], row1[1]);\r\n                for (let k = 1; k < row1.length - 1; k++) {\r\n                    newFaces.push(row1[k], row0[k - 1], row0[k]);\r\n                    newFaces.push(row1[k], row0[k], row1[k + 1]);\r\n                }\r\n            }\r\n        }\r\n        shape.indices = newFaces;\r\n        return shape;\r\n    }\r\n}\r\nMeshFactory.DefaultRadius = 1.0;\r\nMeshFactory.DefaultSubdivisionLevelA = 8;\r\n//# sourceMappingURL=MeshFactory.js.map","import { Scalar } from './../Math';\r\nexport class MeshProcessor {\r\n    static DivideEdge(shape, p0, p1, a, radius, map) {\r\n        if (map) {\r\n            var key = p0 + '_' + p1;\r\n            var list = map[key];\r\n            if (list) {\r\n                return list;\r\n            }\r\n            var inversedkey = p1 + '_' + p0;\r\n            list = map[inversedkey];\r\n            if (list) {\r\n                return list.slice().reverse();\r\n            }\r\n            list = MeshProcessor._divideEdge0(shape, p0, p1, a, radius);\r\n            map[key] = list;\r\n            return list;\r\n        }\r\n        return MeshProcessor._divideEdge0(shape, p0, p1, a, radius);\r\n    }\r\n    static _divideEdge0(shape, p0, p1, a, radius) {\r\n        let list = [p0];\r\n        if (a != 0 && p0 != p1) {\r\n            if (a > 1) {\r\n                let vertices = shape.vertices;\r\n                let normals = shape.normals;\r\n                let uvs = shape.uvs[0];\r\n                let i0x = p0 * 3;\r\n                let i0y = i0x + 1;\r\n                let i0z = i0x + 2;\r\n                let i1x = p1 * 3;\r\n                let i1y = i1x + 1;\r\n                let i1z = i1x + 2;\r\n                let dx = (vertices[i1x] - vertices[i0x]) / a;\r\n                let dy = (vertices[i1y] - vertices[i0y]) / a;\r\n                let dz = (vertices[i1z] - vertices[i0z]) / a;\r\n                let n = vertices.length / 3;\r\n                for (let i = 1; i != a; i++) {\r\n                    let x = vertices[i0x] + dx * i;\r\n                    let y = vertices[i0y] + dy * i;\r\n                    let z = vertices[i0z] + dz * i;\r\n                    let l = Math.sqrt(x * x + y * y + z * z);\r\n                    x /= l;\r\n                    y /= l;\r\n                    z /= l;\r\n                    list.push(n++);\r\n                    vertices.push(x * radius, y * radius, z * radius);\r\n                    normals.push(x, y, z);\r\n                    /*\r\n                        vertices are NOT distributed evenly across longitude and latitude then we MUST compute the uv with formula\r\n                        theta is from +/-[0-PI]\r\n                        phi is from  [0-PI]\r\n                    */\r\n                    let theta = Math.atan2(z, x);\r\n                    let phi = Math.acos(y);\r\n                    let v = 1 - phi / Math.PI; // normalize \r\n                    v = Scalar.WithinEpsilon(v, 0) ? 0 : v; // avoid artifact\r\n                    v = Scalar.WithinEpsilon(v, 1) ? 1 : v; // avoid artifact\r\n                    let u = theta / (2 * Math.PI); // normalize\r\n                    u = theta >= 0 ? u : 1 + u;\r\n                    u = Scalar.WithinEpsilon(u, 0) ? 0 : u; // avoid artifact \r\n                    u = Scalar.WithinEpsilon(u, 1) ? 1 : u; // avoid artifact \r\n                    // avoid zip effect : \r\n                    let u1 = uvs[p0 * 2];\r\n                    let u2 = uvs[p1 * 2];\r\n                    let d1 = u1 - u;\r\n                    let d2 = u2 - u;\r\n                    if (Math.abs(d1) > .5 || Math.abs(d2) > .5) {\r\n                        u += 1;\r\n                    }\r\n                    uvs.push(u, v);\r\n                }\r\n            }\r\n            list.push(p1);\r\n        }\r\n        return list;\r\n    }\r\n}\r\n//# sourceMappingURL=MeshProcessor.js.map","export * from \"./Mesh\";\r\nexport * from \"./MeshFactory\";\r\nexport * from \"./MeshProcessor\";\r\n//# sourceMappingURL=index.js.map","export class Scalar {\r\n    static WithinEpsilon(a, b, epsilon = Scalar.EPSILON) {\r\n        let num = a - b;\r\n        return -epsilon <= num && num <= epsilon;\r\n    }\r\n    ;\r\n}\r\nScalar.EPSILON = 1.401298E-45;\r\nScalar.Sign = function (value) {\r\n    return value > 0 ? 1 : -1;\r\n};\r\nScalar.Clamp = function (value, min, max) {\r\n    if (min === void 0) {\r\n        min = 0;\r\n    }\r\n    if (max === void 0) {\r\n        max = 1;\r\n    }\r\n    return Math.min(max, Math.max(min, value));\r\n};\r\nexport class AbstractRange {\r\n    constructor(min, max = undefined) {\r\n        this.min = min;\r\n        this.max = max;\r\n    }\r\n    get min() {\r\n        return this._min;\r\n    }\r\n    get max() {\r\n        return this._max;\r\n    }\r\n    set min(m) {\r\n        this._min = m;\r\n        this._d = undefined;\r\n    }\r\n    set max(m) {\r\n        this._max = m;\r\n        this._d = undefined;\r\n    }\r\n    get delta() {\r\n        if (this._d === undefined) {\r\n            this._d = this.computeDelta(this._min, this._max);\r\n        }\r\n        return this._d;\r\n    }\r\n}\r\nexport class Range extends AbstractRange {\r\n    computeDelta(a, b) {\r\n        return a && b ? b - a : 0;\r\n    }\r\n}\r\n//# sourceMappingURL=Math.js.map","import { Angle, Timespan } from \"./../Units\";\r\nexport class AxialTilt {\r\n    constructor(obliquity, period) {\r\n        this._obliquity = new Angle(obliquity, AxialTilt.defaultAngleUnit);\r\n        this._period = new Timespan(period, AxialTilt.defaultPeriodUnit);\r\n    }\r\n    get obliquity() {\r\n        return this._obliquity;\r\n    }\r\n    get period() {\r\n        return this._period;\r\n    }\r\n    get meanAngularSpeed() {\r\n        return 360.0 / this._period.value;\r\n    }\r\n}\r\nAxialTilt.defaultAngleUnit = Angle.Units.d;\r\nAxialTilt.defaultPeriodUnit = Timespan.Units.s;\r\n//# sourceMappingURL=AxialTilt.js.map","export var CelestialNodeType;\r\n(function (CelestialNodeType) {\r\n    CelestialNodeType[CelestialNodeType[\"HUBBLE_RADIUS\"] = 0] = \"HUBBLE_RADIUS\";\r\n    CelestialNodeType[CelestialNodeType[\"SUPER_CLUSTER\"] = 1] = \"SUPER_CLUSTER\";\r\n    CelestialNodeType[CelestialNodeType[\"CLUSTER\"] = 2] = \"CLUSTER\";\r\n    CelestialNodeType[CelestialNodeType[\"GROUP\"] = 3] = \"GROUP\";\r\n    CelestialNodeType[CelestialNodeType[\"GALAXY\"] = 4] = \"GALAXY\";\r\n    CelestialNodeType[CelestialNodeType[\"SYSTEM\"] = 5] = \"SYSTEM\";\r\n    CelestialNodeType[CelestialNodeType[\"STAR\"] = 6] = \"STAR\";\r\n    CelestialNodeType[CelestialNodeType[\"PLANET\"] = 7] = \"PLANET\";\r\n    CelestialNodeType[CelestialNodeType[\"MOON\"] = 8] = \"MOON\";\r\n    CelestialNodeType[CelestialNodeType[\"ASTEROIDE\"] = 9] = \"ASTEROIDE\";\r\n    CelestialNodeType[CelestialNodeType[\"COMET\"] = 10] = \"COMET\";\r\n    CelestialNodeType[CelestialNodeType[\"ARTIFICIAL\"] = 11] = \"ARTIFICIAL\";\r\n    CelestialNodeType[CelestialNodeType[\"VOID\"] = 12] = \"VOID\";\r\n    CelestialNodeType[CelestialNodeType[\"BLACK_HOLE\"] = 13] = \"BLACK_HOLE\";\r\n    CelestialNodeType[CelestialNodeType[\"RING\"] = 14] = \"RING\";\r\n})(CelestialNodeType || (CelestialNodeType = {}));\r\n//# sourceMappingURL=ICelestialObject.js.map","import { Temperature, Distance, Mass, Luminosity, QuantityRange as QR } from \"./../Units\";\r\nexport class MorganKeenanClass {\r\n    constructor(major, minor, luminosity = undefined) {\r\n        this._major = major;\r\n        this._minor = minor;\r\n        this._lum = luminosity;\r\n    }\r\n    static Parse(str) {\r\n        let a = this.pattern.exec(str);\r\n        if (a) {\r\n            let major = a[0];\r\n            let minor = parseFloat(a[1]);\r\n            let lum = (a.length > 2 ? a[2] : undefined);\r\n            return new MorganKeenanClass(major, minor, lum);\r\n        }\r\n        return null;\r\n    }\r\n    get major() {\r\n        return this._major;\r\n    }\r\n    get minor() {\r\n        return this._minor;\r\n    }\r\n    get luminosity() {\r\n        return this._lum;\r\n    }\r\n    get fullName() {\r\n        return this._major + this._minor + this._lum ? \"(\" + this._lum + \")\" : \"\";\r\n    }\r\n}\r\nMorganKeenanClass.pattern = /^(O|B|A|F|G|K|M)([0-9](.[0-9])?)((Ia\\+|I|II|III|IV|V|sd|D))?$/;\r\nMorganKeenanClass.LuminosityNames = [\"Ia+\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"sd\", \"D\"];\r\n/* Most stars are currently classified under the Morgan–Keenan (MK) system using the letters O, B, A, F, G, K, and M,\r\n * a sequence from the hottest (O type) to the coolest (M type). Each letter class is then subdivided using a numeric\r\n * digit with 0 being hottest and 9 being coolest (e.g. A8, A9, F0, F1 form a sequence from hotter to cooler).\r\n * The sequence has been expanded with classes for other stars and star-like objects that do not fit in the classical\r\n * system, such as class D for white dwarfs and class C for carbon stars.\r\n * In the MK system, a luminosity class is added to the spectral class using Roman numerals. This is based on the width\r\n * of certain absorption lines in the star\"s spectrum, which vary with the density of the atmosphere and so distinguish\r\n * giant stars from dwarfs. Luminosity class 0 or Ia+ stars for hypergiants, class I stars for supergiants, class II for\r\n * bright giants, class III for regular giants, class IV for sub-giants, class V for main-sequence stars, class sd for\r\n * sub-dwarfs, and class D for white dwarfs. The full spectral class for the Sun is then G2V, indicating a main-sequence\r\n * star with a temperature around 5,800 K.\r\n */\r\nexport class SpectralClass {\r\n    constructor(name, effectiveTemperature, VegaRelativeColorLabel, chromacityLabel, mass, radius, luminosity, hydrogenLine, fractionOfStars) {\r\n        this.name = name;\r\n        this.effectiveTemperature = effectiveTemperature;\r\n        this.VegaRelativeColorLabel = VegaRelativeColorLabel;\r\n        this.chromacityLabel = chromacityLabel;\r\n        this.mass = mass;\r\n        this.radius = radius;\r\n        this.luminosity = luminosity;\r\n        this.hydrogenLine = hydrogenLine;\r\n        this.fractionOfStars = fractionOfStars;\r\n    }\r\n    static ClassFromTemperature(temperature) {\r\n        var temp = new Temperature(temperature, Temperature.Units.k);\r\n        let c = SpectralClass.HarwardClassification;\r\n        for (var i = 0; i !== c.length; i++) {\r\n            let sc = c[i];\r\n            var min = sc.effectiveTemperature.min;\r\n            var max = sc.effectiveTemperature.max;\r\n            if ((!min || min.value <= temp.value) && (!max || max.value > temp.value)) {\r\n                return sc[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\nSpectralClass.O = new SpectralClass(\"O\", new QR(new Temperature(30000, Temperature.Units.k), new Temperature(60000, Temperature.Units.k)), \"blue\", \"blue\", new QR(new Mass(16, Mass.Units.Sm)), new QR(new Distance(6.6, Distance.Units.Sr)), new QR(new Luminosity(30000, Luminosity.Units.Lsun)), \"weak\", 0.00003);\r\nSpectralClass.B = new SpectralClass(\"B\", new QR(new Temperature(10000, Temperature.Units.k), new Temperature(30000, Temperature.Units.k)), \"blue white\", \"deep blue white\", new QR(new Mass(2.1, Mass.Units.Sm), new Mass(16, Mass.Units.Sm)), new QR(new Distance(1.8, Distance.Units.Sr), new Distance(6.6, Distance.Units.Sr)), new QR(new Luminosity(25, Luminosity.Units.Lsun), new Luminosity(30000, Luminosity.Units.Lsun)), \"weak\", 0.13);\r\nSpectralClass.A = new SpectralClass(\"A\", new QR(new Temperature(7500, Temperature.Units.k), new Temperature(10000, Temperature.Units.k)), \"white\", \"blue white\", new QR(new Mass(1.4, Mass.Units.Sm), new Mass(2.1, Mass.Units.Sm)), new QR(new Distance(1.4, Distance.Units.Sr), new Distance(1.8, Distance.Units.Sr)), new QR(new Luminosity(5, Luminosity.Units.Lsun), new Luminosity(25, Luminosity.Units.Lsun)), \"strong\", 0.6);\r\nSpectralClass.F = new SpectralClass(\"F\", new QR(new Temperature(6000, Temperature.Units.k), new Temperature(7500, Temperature.Units.k)), \"yellow white\", \"white\", new QR(new Mass(1.04, Mass.Units.Sm), new Mass(1.4, Mass.Units.Sm)), new QR(new Distance(1.15, Distance.Units.Sr), new Distance(1.4, Distance.Units.Sr)), new QR(new Luminosity(1.5, Luminosity.Units.Lsun), new Luminosity(5, Luminosity.Units.Lsun)), \"medium\", 3);\r\nSpectralClass.G = new SpectralClass(\"G\", new QR(new Temperature(5200, Temperature.Units.k), new Temperature(6000, Temperature.Units.k)), \"yellow\", \"yello white\", new QR(new Mass(0.8, Mass.Units.Sm), new Mass(1.04, Mass.Units.Sm)), new QR(new Distance(0.96, Distance.Units.Sr), new Distance(1.15, Distance.Units.Sr)), new QR(new Luminosity(0.6, Luminosity.Units.Lsun), new Luminosity(1.5, Luminosity.Units.Lsun)), \"weak\", 7.6);\r\nSpectralClass.K = new SpectralClass(\"K\", new QR(new Temperature(3700, Temperature.Units.k), new Temperature(5200, Temperature.Units.k)), \"orange\tpale\", \"yello orange\", new QR(new Mass(0.45, Mass.Units.Sm), new Mass(0.8, Mass.Units.Sm)), new QR(new Distance(0.7, Distance.Units.Sr), new Distance(0.96, Distance.Units.Sr)), new QR(new Luminosity(0.08, Luminosity.Units.Lsun), new Luminosity(0.6, Luminosity.Units.Lsun)), \"very weak\", 12.1);\r\nSpectralClass.M = new SpectralClass(\"M\", new QR(new Temperature(2400, Temperature.Units.k), new Temperature(3700, Temperature.Units.k)), \"red light\", \"orange red\", new QR(new Mass(0.08, Mass.Units.Sm), new Mass(0.45, Mass.Units.Sm)), new QR(null, new Distance(0.7, Distance.Units.Sr)), new QR(null, new Luminosity(0.8, Luminosity.Units.Lsun)), \"very weak\", 76.45);\r\nSpectralClass.HarwardClassificationIndex = {\r\n    \"O\": SpectralClass.O,\r\n    \"B\": SpectralClass.B,\r\n    \"A\": SpectralClass.A,\r\n    \"F\": SpectralClass.F,\r\n    \"G\": SpectralClass.G,\r\n    \"K\": SpectralClass.K,\r\n    \"M\": SpectralClass.M\r\n};\r\nSpectralClass.HarwardClassification = [\r\n    SpectralClass.O,\r\n    SpectralClass.B,\r\n    SpectralClass.A,\r\n    SpectralClass.F,\r\n    SpectralClass.G,\r\n    SpectralClass.K,\r\n    SpectralClass.M\r\n];\r\nSpectralClass.TemperatureRange = new QR(new Temperature(2400, Temperature.Units.k), new Temperature(60000, Temperature.Units.k));\r\n//# sourceMappingURL=SpectralClass.js.map","import { SpectralClass, MorganKeenanClass } from './SpectralClass';\r\nimport { Temperature } from './../Units';\r\nimport { RGBAColor } from './../Color';\r\nclass ColorValue {\r\n}\r\n/*\r\n * • The upshot is this: the color of a star depends on its surface temperature.  But a blue star doesn’t emit only blue light,\r\n *   nor does a red star emit only red light.  They emit visible light of all colors to some degree.  It’s just that their\r\n *   spectrum peaks at a particular color.\r\n * • So why are there blue stars, yellow stars, red stars, but no green stars?  As it turns out, there are green stars, that is,\r\n *   stars that radiate much of their light in the green part of the spectrum.  But the total combination of the full range of\r\n *   colors of a “green” star appears white to our eyes.  If you pass the color from a whitish star through a prism, you’ll see\r\n *   all the colors, including green, spread out in a continuum.\r\n * • Astronomers came to understand that bluer stars are intrinsically brighter because they are more massive than\r\n *   white or red stars, and more massive stars burn much faster and hotter than less massive stars.  The bluish type-O stars,\r\n *   for example, are only 30-50 times more massive than yellow-white stars like our sun.  But O stars burn a million times\r\n *   brighter, so they have far shorter lifetimes.\r\n *   O and B stars only last a few million years before they die in spectacular supernova explosions, while cooler and less\r\n *   massive K and M stars burn steadily for billions of years.\r\n * • Some 88% of stars in the universe seem to be the cooler type K and M.  Only 1 in 3,000,000 stars are type O.\r\n *   Even middle-weights like our type-G Sun comprise only 8% of all known stars.\r\n *   This relationship between star mass, luminosity, and color holds only for stars burning hydrogen in the core during the\r\n *   prime of their lives. For example, young and middle-aged M-type stars are small, faint and long-lived.  But as stars age\r\n *   and start burning heavier elements in the core, bluish O and B stars, for example, evolve briefly into immensely bright\r\n *   M-type red stars known as red supergiants. We’ll explain this in later issues.  If it sounds complicated, fear not.\r\n *   Even astronomy majors wrestle over this for some time before they understand how stars live and evolve.\r\n *\r\n * thanks to http://oneminuteastronomer.com/708/star-colors-explained/\r\n * ---------------------------------------------------------------------\r\n * Stars radiate light a little like glowing coals in a campfire.  Just as a glowing red-hot coal is cooler than a white-hot coal,\r\n * for example, so a red star is cooler than a white star, and a white star is cooler than a blue star. This was a major scientific\r\n * discovery… simply by measuring the color of light coming from a star, and applying a little physics, it was possible to estimate\r\n * a star’s surface temperature.\r\n * Like most scientists, astronomers love to classify things.  In the late 19th century, Harvard astronomers developed a system to\r\n * classify stars not according to color, but by the strength by which hydrogen gas absorbed light at particular wavelengths.\r\n * The star classes were labeled A to N in order of decreasing hydrogen absorption strength.  After a time, the classes\r\n * were simplified to O, B, A, F, G, K, and M.  This is the Harvard spectral classification, which is still used today.\r\n * So what does this have to do with star color?\r\n * • As astronomers and physicists learned more about atomic structure and the spectra of light from stars,\r\n *   they discovered the Harvard classification system really described the temperature of a star’s atmosphere.\r\n *   They discovered the type-O stars are hotter than type-B stars, and type-B stars are hotter than type-A stars, and so on.\r\n *   But hot stars are blue, and medium-hot stars are white, and cool stars are red.\r\n * • Here’s a summary of the dominant color and temperatures of the main classes of stars, along with examples of stars that\r\n *   belong to each class\r\n * according http://www.vendian.org/mncharity/dir3/starcolor/UnstableURLs/starcolors.html\r\n */\r\nexport class StarColor {\r\n    static _buildIndex(ColorTable) {\r\n        var o = {};\r\n        for (let l of MorganKeenanClass.LuminosityNames) {\r\n            o[l] = Array.from(StarColor._SelectByLuminosity(l, ColorTable)).sort((a, b) => a.kelvin - b.kelvin);\r\n        }\r\n        return o;\r\n    }\r\n    static *_SelectByLuminosity(l, table) {\r\n        for (let p of table) {\r\n            let c = MorganKeenanClass.Parse(p.key);\r\n            if (c && c.luminosity === l) {\r\n                var t = .9 - (c.minor / 10);\r\n                var sc = SpectralClass.HarwardClassificationIndex[c.major];\r\n                var { min, delta } = sc.effectiveTemperature;\r\n                var { r, g, b } = p.value;\r\n                yield { mk: c,\r\n                    class: sc,\r\n                    kelvin: min.value + delta * t,\r\n                    color: new RGBAColor(r, g, b) };\r\n            }\r\n        }\r\n    }\r\n    static _lookup(source, temperature) {\r\n        var low = 0, high = source.length;\r\n        while (low < high) {\r\n            var mid = (low + high) >>> 1;\r\n            if (source[mid].kelvin > temperature)\r\n                low = mid + 1;\r\n            else\r\n                high = mid;\r\n        }\r\n        return low;\r\n    }\r\n    /* use to find the range of matrix items wheres temperature lies.\r\n       return an array of one or two matrix item */\r\n    static _lookupIndexes(luminosity, temperature) {\r\n        var l = StarColor.Matrix[luminosity];\r\n        if (!l || !l.length)\r\n            return [];\r\n        var i = StarColor._lookup(l, temperature);\r\n        var res = [];\r\n        if (i == l.length) {\r\n            res.push(l[i - 1]);\r\n            return res;\r\n        }\r\n        res.push(l[i]);\r\n        if (i > 0) {\r\n            res.push(l[i - 1]);\r\n        }\r\n        return res;\r\n    }\r\n    static lookupRgb(luminosity, temperature) {\r\n        var kelvin = new Temperature(temperature, Temperature.Units.k);\r\n        var i = this._lookupIndexes(luminosity, kelvin.value);\r\n        if (!i || !i.length)\r\n            return new RGBAColor(0, 0, 0);\r\n        if (i.length == 1) {\r\n            return i[0].color;\r\n        }\r\n        var k0 = i[0].kelvin;\r\n        var k1 = i[1].kelvin;\r\n        var dk = (k1 - k0);\r\n        var c0 = i[0].color;\r\n        if (dk == 0)\r\n            return c0;\r\n        var c1 = i[1].color;\r\n        ;\r\n        var f = (kelvin.value - k0) / dk;\r\n        return c0.interpolateInPlace(c1, f);\r\n    }\r\n}\r\nStarColor.ColorTable = [\r\n    { key: \"O9I\", value: { x: 0.2507, y: 0.2468, r: 164, g: 185, b: 255, color: \"#a4b9ff\" } },\r\n    { key: \"B0I\", value: { x: 0.2498, y: 0.2513, r: 161, g: 189, b: 255, color: \"#a1bdff\" } },\r\n    { key: \"B1I\", value: { x: 0.2547, y: 0.2562, r: 168, g: 193, b: 255, color: \"#a8c1ff\" } },\r\n    { key: \"B2I\", value: { x: 0.2606, y: 0.2611, r: 177, g: 196, b: 255, color: \"#b1c4ff\" } },\r\n    { key: \"B3I\", value: { x: 0.2591, y: 0.2582, r: 175, g: 194, b: 255, color: \"#afc2ff\" } },\r\n    { key: \"B4I\", value: { x: 0.2678, y: 0.271, r: 187, g: 203, b: 255, color: \"#bbcbff\" } },\r\n    { key: \"B5I\", value: { x: 0.2628, y: 0.2685, r: 179, g: 202, b: 255, color: \"#b3caff\" } },\r\n    { key: \"B6I\", value: { x: 0.2711, y: 0.2754, r: 191, g: 207, b: 255, color: \"#bfcfff\" } },\r\n    { key: \"B7I\", value: { x: 0.2734, y: 0.2785, r: 195, g: 209, b: 255, color: \"#c3d1ff\" } },\r\n    { key: \"B8I\", value: { x: 0.2653, y: 0.274, r: 182, g: 206, b: 255, color: \"#b6ceff\" } },\r\n    { key: \"B9I\", value: { x: 0.2797, y: 0.2865, r: 204, g: 216, b: 255, color: \"#ccd8ff\" } },\r\n    { key: \"A0I\", value: { x: 0.2683, y: 0.2737, r: 187, g: 206, b: 255, color: \"#bbceff\" } },\r\n    { key: \"A1I\", value: { x: 0.2871, y: 0.2955, r: 214, g: 223, b: 255, color: \"#d6dfff\" } },\r\n    { key: \"A2I\", value: { x: 0.2768, y: 0.2842, r: 199, g: 214, b: 255, color: \"#c7d6ff\" } },\r\n    { key: \"A5I\", value: { x: 0.2925, y: 0.3019, r: 223, g: 229, b: 255, color: \"#dfe5ff\" } },\r\n    { key: \"F0I\", value: { x: 0.2789, y: 0.2855, r: 202, g: 215, b: 255, color: \"#cad7ff\" } },\r\n    { key: \"F2I\", value: { x: 0.3061, y: 0.3172, r: 244, g: 243, b: 255, color: \"#f4f3ff\" } },\r\n    { key: \"F5I\", value: { x: 0.2899, y: 0.2978, r: 219, g: 225, b: 255, color: \"#dbe1ff\" } },\r\n    { key: \"F8I\", value: { x: 0.3177, y: 0.3337, r: 255, g: 252, b: 247, color: \"#fffcf7\" } },\r\n    { key: \"G0I\", value: { x: 0.3361, y: 0.349, r: 255, g: 239, b: 219, color: \"#ffefdb\" } },\r\n    { key: \"G2I\", value: { x: 0.3461, y: 0.3605, r: 255, g: 236, b: 205, color: \"#ffeccd\" } },\r\n    { key: \"G3I\", value: { x: 0.3479, y: 0.3566, r: 255, g: 231, b: 203, color: \"#ffe7cb\" } },\r\n    { key: \"G5I\", value: { x: 0.3617, y: 0.3769, r: 255, g: 230, b: 183, color: \"#ffe6b7\" } },\r\n    { key: \"G8I\", value: { x: 0.3764, y: 0.3833, r: 255, g: 220, b: 167, color: \"#ffdca7\" } },\r\n    { key: \"K0I\", value: { x: 0.3659, y: 0.3706, r: 255, g: 221, b: 181, color: \"#ffddb5\" } },\r\n    { key: \"K1I\", value: { x: 0.3693, y: 0.373, r: 255, g: 220, b: 177, color: \"#ffdcb1\" } },\r\n    { key: \"K2I\", value: { x: 0.4022, y: 0.4058, r: 255, g: 211, b: 135, color: \"#ffd387\" } },\r\n    { key: \"K3I\", value: { x: 0.411, y: 0.4074, r: 255, g: 204, b: 128, color: \"#ffcc80\" } },\r\n    { key: \"K4I\", value: { x: 0.4195, y: 0.4128, r: 255, g: 201, b: 118, color: \"#ffc976\" } },\r\n    { key: \"K5I\", value: { x: 0.3896, y: 0.3863, r: 255, g: 209, b: 154, color: \"#ffd19a\" } },\r\n    { key: \"M0I\", value: { x: 0.3994, y: 0.392, r: 255, g: 204, b: 143, color: \"#ffcc8f\" } },\r\n    { key: \"M1I\", value: { x: 0.4048, y: 0.3948, r: 255, g: 202, b: 138, color: \"#ffca8a\" } },\r\n    { key: \"M2I\", value: { x: 0.4338, y: 0.4178, r: 255, g: 193, b: 104, color: \"#ffc168\" } },\r\n    { key: \"M3I\", value: { x: 0.4254, y: 0.4044, r: 255, g: 192, b: 118, color: \"#ffc076\" } },\r\n    { key: \"M4I\", value: { x: 0.4402, y: 0.41, r: 255, g: 185, b: 104, color: \"#ffb968\" } },\r\n    { key: \"B2II\", value: { x: 0.253, y: 0.2557, r: 165, g: 192, b: 255, color: \"#a5c0ff\" } },\r\n    { key: \"B5II\", value: { x: 0.2593, y: 0.2597, r: 175, g: 195, b: 255, color: \"#afc3ff\" } },\r\n    { key: \"F0II\", value: { x: 0.2795, y: 0.288, r: 203, g: 217, b: 255, color: \"#cbd9ff\" } },\r\n    { key: \"F2II\", value: { x: 0.2966, y: 0.3069, r: 229, g: 233, b: 255, color: \"#e5e9ff\" } },\r\n    { key: \"G5II\", value: { x: 0.3471, y: 0.3611, r: 255, g: 235, b: 203, color: \"#ffebcb\" } },\r\n    { key: \"M3II\", value: { x: 0.4185, y: 0.412, r: 255, g: 201, b: 119, color: \"#ffc977\" } },\r\n    { key: \"O7III\", value: { x: 0.246, y: 0.2363, r: 158, g: 177, b: 255, color: \"#9eb1ff\" } },\r\n    { key: \"O8III\", value: { x: 0.2455, y: 0.2373, r: 157, g: 178, b: 255, color: \"#9db2ff\" } },\r\n    { key: \"O9III\", value: { x: 0.246, y: 0.2363, r: 158, g: 177, b: 255, color: \"#9eb1ff\" } },\r\n    { key: \"B0III\", value: { x: 0.246, y: 0.2363, r: 158, g: 177, b: 255, color: \"#9eb1ff\" } },\r\n    { key: \"B1III\", value: { x: 0.246, y: 0.2363, r: 158, g: 177, b: 255, color: \"#9eb1ff\" } },\r\n    { key: \"B2III\", value: { x: 0.247, y: 0.2396, r: 159, g: 180, b: 255, color: \"#9fb4ff\" } },\r\n    { key: \"B3III\", value: { x: 0.2509, y: 0.2486, r: 163, g: 187, b: 255, color: \"#a3bbff\" } },\r\n    { key: \"B5III\", value: { x: 0.2541, y: 0.2514, r: 168, g: 189, b: 255, color: \"#a8bdff\" } },\r\n    { key: \"B7III\", value: { x: 0.2562, y: 0.2542, r: 171, g: 191, b: 255, color: \"#abbfff\" } },\r\n    { key: \"B9III\", value: { x: 0.2615, y: 0.2608, r: 178, g: 195, b: 255, color: \"#b2c3ff\" } },\r\n    { key: \"A0III\", value: { x: 0.2687, y: 0.2729, r: 188, g: 205, b: 255, color: \"#bccdff\" } },\r\n    { key: \"A3III\", value: { x: 0.2691, y: 0.2707, r: 189, g: 203, b: 255, color: \"#bdcbff\" } },\r\n    { key: \"A5III\", value: { x: 0.2787, y: 0.2858, r: 202, g: 215, b: 255, color: \"#cad7ff\" } },\r\n    { key: \"A6III\", value: { x: 0.2837, y: 0.2903, r: 209, g: 219, b: 255, color: \"#d1dbff\" } },\r\n    { key: \"A7III\", value: { x: 0.2843, y: 0.2911, r: 210, g: 219, b: 255, color: \"#d2dbff\" } },\r\n    { key: \"A8III\", value: { x: 0.2837, y: 0.2903, r: 209, g: 219, b: 255, color: \"#d1dbff\" } },\r\n    { key: \"A9III\", value: { x: 0.2837, y: 0.2903, r: 209, g: 219, b: 255, color: \"#d1dbff\" } },\r\n    { key: \"F0III\", value: { x: 0.2865, y: 0.2945, r: 213, g: 222, b: 255, color: \"#d5deff\" } },\r\n    { key: \"F2III\", value: { x: 0.3041, y: 0.3151, r: 241, g: 241, b: 255, color: \"#f1f1ff\" } },\r\n    { key: \"F4III\", value: { x: 0.3043, y: 0.3137, r: 241, g: 240, b: 255, color: \"#f1f0ff\" } },\r\n    { key: \"F5III\", value: { x: 0.3048, y: 0.3145, r: 242, g: 240, b: 255, color: \"#f2f0ff\" } },\r\n    { key: \"F6III\", value: { x: 0.3043, y: 0.3137, r: 241, g: 240, b: 255, color: \"#f1f0ff\" } },\r\n    { key: \"F7III\", value: { x: 0.3043, y: 0.3137, r: 241, g: 240, b: 255, color: \"#f1f0ff\" } },\r\n    { key: \"G0III\", value: { x: 0.3268, y: 0.3384, r: 255, g: 242, b: 233, color: \"#fff2e9\" } },\r\n    { key: \"G1III\", value: { x: 0.3265, y: 0.338, r: 255, g: 243, b: 233, color: \"#fff3e9\" } },\r\n    { key: \"G2III\", value: { x: 0.3265, y: 0.338, r: 255, g: 243, b: 233, color: \"#fff3e9\" } },\r\n    { key: \"G3III\", value: { x: 0.3265, y: 0.338, r: 255, g: 243, b: 233, color: \"#fff3e9\" } },\r\n    { key: \"G4III\", value: { x: 0.3265, y: 0.338, r: 255, g: 243, b: 233, color: \"#fff3e9\" } },\r\n    { key: \"G5III\", value: { x: 0.3421, y: 0.3541, r: 255, g: 236, b: 211, color: \"#ffecd3\" } },\r\n    { key: \"G6III\", value: { x: 0.3392, y: 0.3496, r: 255, g: 236, b: 215, color: \"#ffecd7\" } },\r\n    { key: \"G8III\", value: { x: 0.3505, y: 0.3613, r: 255, g: 231, b: 199, color: \"#ffe7c7\" } },\r\n    { key: \"G9III\", value: { x: 0.3529, y: 0.3643, r: 255, g: 231, b: 196, color: \"#ffe7c4\" } },\r\n    { key: \"K0III\", value: { x: 0.358, y: 0.3663, r: 255, g: 227, b: 190, color: \"#ffe3be\" } },\r\n    { key: \"K1III\", value: { x: 0.3653, y: 0.3721, r: 255, g: 223, b: 181, color: \"#ffdfb5\" } },\r\n    { key: \"K2III\", value: { x: 0.3698, y: 0.376, r: 255, g: 221, b: 175, color: \"#ffddaf\" } },\r\n    { key: \"K3III\", value: { x: 0.3776, y: 0.38, r: 255, g: 216, b: 167, color: \"#ffd8a7\" } },\r\n    { key: \"K4III\", value: { x: 0.3947, y: 0.3956, r: 255, g: 211, b: 146, color: \"#ffd392\" } },\r\n    { key: \"K5III\", value: { x: 0.4034, y: 0.3966, r: 255, g: 204, b: 138, color: \"#ffcc8a\" } },\r\n    { key: \"K7III\", value: { x: 0.3989, y: 0.3975, r: 255, g: 208, b: 142, color: \"#ffd08e\" } },\r\n    { key: \"M0III\", value: { x: 0.4088, y: 0.4013, r: 255, g: 203, b: 132, color: \"#ffcb84\" } },\r\n    { key: \"M1III\", value: { x: 0.4181, y: 0.4085, r: 255, g: 200, b: 121, color: \"#ffc879\" } },\r\n    { key: \"M2III\", value: { x: 0.4215, y: 0.4098, r: 255, g: 198, b: 118, color: \"#ffc676\" } },\r\n    { key: \"M3III\", value: { x: 0.4192, y: 0.4108, r: 255, g: 200, b: 119, color: \"#ffc877\" } },\r\n    { key: \"M4III\", value: { x: 0.4102, y: 0.4091, r: 255, g: 206, b: 127, color: \"#ffce7f\" } },\r\n    { key: \"M5III\", value: { x: 0.4171, y: 0.4035, r: 255, g: 197, b: 124, color: \"#ffc57c\" } },\r\n    { key: \"M6III\", value: { x: 0.4312, y: 0.3876, r: 255, g: 178, b: 121, color: \"#ffb279\" } },\r\n    { key: \"M7III\", value: { x: 0.4591, y: 0.3966, r: 255, g: 165, b: 97, color: \"#ffa561\" } },\r\n    { key: \"M8III\", value: { x: 0.4582, y: 0.398, r: 255, g: 167, b: 97, color: \"#ffa761\" } },\r\n    { key: \"M9III\", value: { x: 0.3802, y: 0.4084, r: 255, g: 233, b: 154, color: \"#ffe99a\" } },\r\n    { key: \"B1IV\", value: { x: 0.2459, y: 0.2397, r: 157, g: 180, b: 255, color: \"#9db4ff\" } },\r\n    { key: \"B2IV\", value: { x: 0.2467, y: 0.2388, r: 159, g: 179, b: 255, color: \"#9fb3ff\" } },\r\n    { key: \"B3IV\", value: { x: 0.2523, y: 0.2498, r: 166, g: 188, b: 255, color: \"#a6bcff\" } },\r\n    { key: \"B6IV\", value: { x: 0.2591, y: 0.2582, r: 175, g: 194, b: 255, color: \"#afc2ff\" } },\r\n    { key: \"B7IV\", value: { x: 0.2552, y: 0.2522, r: 170, g: 189, b: 255, color: \"#aabdff\" } },\r\n    { key: \"B9IV\", value: { x: 0.2628, y: 0.2629, r: 180, g: 197, b: 255, color: \"#b4c5ff\" } },\r\n    { key: \"A0IV\", value: { x: 0.2622, y: 0.2623, r: 179, g: 197, b: 255, color: \"#b3c5ff\" } },\r\n    { key: \"A3IV\", value: { x: 0.2698, y: 0.2734, r: 190, g: 205, b: 255, color: \"#becdff\" } },\r\n    { key: \"A4IV\", value: { x: 0.2738, y: 0.2793, r: 195, g: 210, b: 255, color: \"#c3d2ff\" } },\r\n    { key: \"A5IV\", value: { x: 0.2857, y: 0.2923, r: 212, g: 220, b: 255, color: \"#d4dcff\" } },\r\n    { key: \"A7IV\", value: { x: 0.2715, y: 0.2759, r: 192, g: 207, b: 255, color: \"#c0cfff\" } },\r\n    { key: \"A9IV\", value: { x: 0.2932, y: 0.2997, r: 224, g: 227, b: 255, color: \"#e0e3ff\" } },\r\n    { key: \"F0IV\", value: { x: 0.2893, y: 0.2966, r: 218, g: 224, b: 255, color: \"#dae0ff\" } },\r\n    { key: \"F2IV\", value: { x: 0.2951, y: 0.3029, r: 227, g: 230, b: 255, color: \"#e3e6ff\" } },\r\n    { key: \"F3IV\", value: { x: 0.2952, y: 0.3036, r: 227, g: 230, b: 255, color: \"#e3e6ff\" } },\r\n    { key: \"F5IV\", value: { x: 0.3044, y: 0.3133, r: 241, g: 239, b: 255, color: \"#f1efff\" } },\r\n    { key: \"F7IV\", value: { x: 0.304, y: 0.313, r: 240, g: 239, b: 255, color: \"#f0efff\" } },\r\n    { key: \"F8IV\", value: { x: 0.3138, y: 0.328, r: 255, g: 252, b: 253, color: \"#fffcfd\" } },\r\n    { key: \"G0IV\", value: { x: 0.319, y: 0.3317, r: 255, g: 248, b: 245, color: \"#fff8f5\" } },\r\n    { key: \"G2IV\", value: { x: 0.3212, y: 0.3311, r: 255, g: 244, b: 242, color: \"#fff4f2\" } },\r\n    { key: \"G3IV\", value: { x: 0.3319, y: 0.3417, r: 255, g: 238, b: 226, color: \"#ffeee2\" } },\r\n    { key: \"G4IV\", value: { x: 0.3232, y: 0.3359, r: 255, g: 245, b: 238, color: \"#fff5ee\" } },\r\n    { key: \"G5IV\", value: { x: 0.3404, y: 0.3503, r: 255, g: 235, b: 213, color: \"#ffebd5\" } },\r\n    { key: \"G6IV\", value: { x: 0.326, y: 0.3359, r: 255, g: 242, b: 234, color: \"#fff2ea\" } },\r\n    { key: \"G7IV\", value: { x: 0.3466, y: 0.3551, r: 255, g: 231, b: 205, color: \"#ffe7cd\" } },\r\n    { key: \"G8IV\", value: { x: 0.3422, y: 0.351, r: 255, g: 233, b: 211, color: \"#ffe9d3\" } },\r\n    { key: \"K0IV\", value: { x: 0.3592, y: 0.3659, r: 255, g: 225, b: 189, color: \"#ffe1bd\" } },\r\n    { key: \"K1IV\", value: { x: 0.3743, y: 0.3753, r: 255, g: 216, b: 171, color: \"#ffd8ab\" } },\r\n    { key: \"K2IV\", value: { x: 0.3491, y: 0.3565, r: 255, g: 229, b: 202, color: \"#ffe5ca\" } },\r\n    { key: \"K3IV\", value: { x: 0.3764, y: 0.3821, r: 255, g: 219, b: 167, color: \"#ffdba7\" } },\r\n    { key: \"O5V\", value: { x: 0.2436, y: 0.2343, r: 155, g: 176, b: 255, color: \"#9bb0ff\" } },\r\n    { key: \"O6V\", value: { x: 0.2492, y: 0.2445, r: 162, g: 184, b: 255, color: \"#a2b8ff\" } },\r\n    { key: \"O7V\", value: { x: 0.2451, y: 0.2351, r: 157, g: 177, b: 255, color: \"#9db1ff\" } },\r\n    { key: \"O8V\", value: { x: 0.2451, y: 0.2351, r: 157, g: 177, b: 255, color: \"#9db1ff\" } },\r\n    { key: \"O9V\", value: { x: 0.2437, y: 0.2366, r: 154, g: 178, b: 255, color: \"#9ab2ff\" } },\r\n    { key: \"O9.5V\", value: { x: 0.251, y: 0.2472, r: 164, g: 186, b: 255, color: \"#a4baff\" } },\r\n    { key: \"B0V\", value: { x: 0.2448, y: 0.2362, r: 156, g: 178, b: 255, color: \"#9cb2ff\" } },\r\n    { key: \"B0.5V\", value: { x: 0.253, y: 0.2501, r: 167, g: 188, b: 255, color: \"#a7bcff\" } },\r\n    { key: \"B1V\", value: { x: 0.2481, y: 0.2424, r: 160, g: 182, b: 255, color: \"#a0b6ff\" } },\r\n    { key: \"B2V\", value: { x: 0.2474, y: 0.2395, r: 160, g: 180, b: 255, color: \"#a0b4ff\" } },\r\n    { key: \"B3V\", value: { x: 0.2517, y: 0.2472, r: 165, g: 185, b: 255, color: \"#a5b9ff\" } },\r\n    { key: \"B4V\", value: { x: 0.2506, y: 0.2453, r: 164, g: 184, b: 255, color: \"#a4b8ff\" } },\r\n    { key: \"B5V\", value: { x: 0.2559, y: 0.2546, r: 170, g: 191, b: 255, color: \"#aabfff\" } },\r\n    { key: \"B6V\", value: { x: 0.2563, y: 0.2522, r: 172, g: 189, b: 255, color: \"#acbdff\" } },\r\n    { key: \"B7V\", value: { x: 0.2578, y: 0.2555, r: 173, g: 191, b: 255, color: \"#adbfff\" } },\r\n    { key: \"B8V\", value: { x: 0.2604, y: 0.2603, r: 177, g: 195, b: 255, color: \"#b1c3ff\" } },\r\n    { key: \"B9V\", value: { x: 0.2639, y: 0.2642, r: 181, g: 198, b: 255, color: \"#b5c6ff\" } },\r\n    { key: \"A0V\", value: { x: 0.2668, y: 0.2686, r: 185, g: 201, b: 255, color: \"#b9c9ff\" } },\r\n    { key: \"A1V\", value: { x: 0.2635, y: 0.265, r: 181, g: 199, b: 255, color: \"#b5c7ff\" } },\r\n    { key: \"A2V\", value: { x: 0.2677, y: 0.2701, r: 187, g: 203, b: 255, color: \"#bbcbff\" } },\r\n    { key: \"A3V\", value: { x: 0.2706, y: 0.2752, r: 191, g: 207, b: 255, color: \"#bfcfff\" } },\r\n    { key: \"A5V\", value: { x: 0.2786, y: 0.2858, r: 202, g: 215, b: 255, color: \"#cad7ff\" } },\r\n    { key: \"A6V\", value: { x: 0.2765, y: 0.2825, r: 199, g: 212, b: 255, color: \"#c7d4ff\" } },\r\n    { key: \"A7V\", value: { x: 0.2771, y: 0.283, r: 200, g: 213, b: 255, color: \"#c8d5ff\" } },\r\n    { key: \"A8V\", value: { x: 0.2864, y: 0.2943, r: 213, g: 222, b: 255, color: \"#d5deff\" } },\r\n    { key: \"A9V\", value: { x: 0.2901, y: 0.2971, r: 219, g: 224, b: 255, color: \"#dbe0ff\" } },\r\n    { key: \"F0V\", value: { x: 0.2932, y: 0.3018, r: 224, g: 229, b: 255, color: \"#e0e5ff\" } },\r\n    { key: \"F2V\", value: { x: 0.3012, y: 0.3125, r: 236, g: 239, b: 255, color: \"#ecefff\" } },\r\n    { key: \"F4V\", value: { x: 0.2935, y: 0.2993, r: 224, g: 226, b: 255, color: \"#e0e2ff\" } },\r\n    { key: \"F5V\", value: { x: 0.3088, y: 0.3209, r: 248, g: 247, b: 255, color: \"#f8f7ff\" } },\r\n    { key: \"F6V\", value: { x: 0.306, y: 0.3154, r: 244, g: 241, b: 255, color: \"#f4f1ff\" } },\r\n    { key: \"F7V\", value: { x: 0.3075, y: 0.3168, r: 246, g: 243, b: 255, color: \"#f6f3ff\" } },\r\n    { key: \"F8V\", value: { x: 0.3147, y: 0.324, r: 255, g: 247, b: 252, color: \"#fff7fc\" } },\r\n    { key: \"F9V\", value: { x: 0.3149, y: 0.3247, r: 255, g: 247, b: 252, color: \"#fff7fc\" } },\r\n    { key: \"G0V\", value: { x: 0.3149, y: 0.3257, r: 255, g: 248, b: 252, color: \"#fff8fc\" } },\r\n    { key: \"G1V\", value: { x: 0.3172, y: 0.3278, r: 255, g: 247, b: 248, color: \"#fff7f8\" } },\r\n    { key: \"G2V\", value: { x: 0.3211, y: 0.3323, r: 255, g: 245, b: 242, color: \"#fff5f2\" } },\r\n    { key: \"G4V\", value: { x: 0.3293, y: 0.3403, r: 255, g: 241, b: 229, color: \"#fff1e5\" } },\r\n    { key: \"G5V\", value: { x: 0.326, y: 0.3382, r: 255, g: 244, b: 234, color: \"#fff4ea\" } },\r\n    { key: \"G6V\", value: { x: 0.3257, y: 0.338, r: 255, g: 244, b: 235, color: \"#fff4eb\" } },\r\n    { key: \"G7V\", value: { x: 0.3257, y: 0.338, r: 255, g: 244, b: 235, color: \"#fff4eb\" } },\r\n    { key: \"G8V\", value: { x: 0.3346, y: 0.3445, r: 255, g: 237, b: 222, color: \"#ffedde\" } },\r\n    { key: \"G9V\", value: { x: 0.3352, y: 0.3469, r: 255, g: 239, b: 221, color: \"#ffefdd\" } },\r\n    { key: \"K0V\", value: { x: 0.3352, y: 0.3458, r: 255, g: 238, b: 221, color: \"#ffeedd\" } },\r\n    { key: \"K1V\", value: { x: 0.3603, y: 0.3664, r: 255, g: 224, b: 188, color: \"#ffe0bc\" } },\r\n    { key: \"K2V\", value: { x: 0.3535, y: 0.3597, r: 255, g: 227, b: 196, color: \"#ffe3c4\" } },\r\n    { key: \"K3V\", value: { x: 0.3555, y: 0.3571, r: 255, g: 222, b: 195, color: \"#ffdec3\" } },\r\n    { key: \"K4V\", value: { x: 0.367, y: 0.3645, r: 255, g: 216, b: 181, color: \"#ffd8b5\" } },\r\n    { key: \"K5V\", value: { x: 0.3836, y: 0.3798, r: 255, g: 210, b: 161, color: \"#ffd2a1\" } },\r\n    { key: \"K7V\", value: { x: 0.403, y: 0.3875, r: 255, g: 199, b: 142, color: \"#ffc78e\" } },\r\n    { key: \"K8V\", value: { x: 0.3746, y: 0.3661, r: 255, g: 209, b: 174, color: \"#ffd1ae\" } },\r\n    { key: \"M0V\", value: { x: 0.4073, y: 0.3876, r: 255, g: 195, b: 139, color: \"#ffc38b\" } },\r\n    { key: \"M1V\", value: { x: 0.4011, y: 0.3927, r: 255, g: 204, b: 142, color: \"#ffcc8e\" } },\r\n    { key: \"M2V\", value: { x: 0.413, y: 0.3958, r: 255, g: 196, b: 131, color: \"#ffc483\" } },\r\n    { key: \"M3V\", value: { x: 0.4089, y: 0.4075, r: 255, g: 206, b: 129, color: \"#ffce81\" } },\r\n    { key: \"M4V\", value: { x: 0.4137, y: 0.4043, r: 255, g: 201, b: 127, color: \"#ffc97f\" } },\r\n    { key: \"M5V\", value: { x: 0.4227, y: 0.4218, r: 255, g: 204, b: 111, color: \"#ffcc6f\" } },\r\n    { key: \"M6V\", value: { x: 0.4271, y: 0.4123, r: 255, g: 195, b: 112, color: \"#ffc370\" } },\r\n    { key: \"M8V\", value: { x: 0.4276, y: 0.4176, r: 255, g: 198, b: 109, color: \"#ffc66d\" } }\r\n];\r\n/* this is where we prepare the static matrix (Space.StarColorFactory.Matrix) to efficient color lookup. */\r\nStarColor.Matrix = StarColor._buildIndex(StarColor.ColorTable);\r\n//# sourceMappingURL=StarColor.js.map","export * from \"./ICelestialObject\";\r\nexport * from \"./SpectralClass\";\r\nexport * from \"./StarColor\";\r\nexport * from \"./AxialTilt\";\r\n//# sourceMappingURL=index.js.map","import { AbstractRange } from \"./Math\";\r\nexport class Unit {\r\n    constructor(name, symbol, value = 0, converter = null) {\r\n        this.name = name;\r\n        this.symbol = symbol;\r\n        this.value = value;\r\n        this.converter = converter;\r\n    }\r\n}\r\nconst _defaultDecimalPrecision = 6;\r\nexport class Quantity {\r\n    constructor(value, unit) {\r\n        if (value instanceof Quantity) {\r\n            var q = value;\r\n            this.value = q.value;\r\n            this._unit = q._unit;\r\n        }\r\n        else {\r\n            this.value = value;\r\n            this._unit = unit;\r\n        }\r\n    }\r\n    static round(value, decimalPrecision = _defaultDecimalPrecision) {\r\n        var dp = decimalPrecision || _defaultDecimalPrecision;\r\n        return Math.round(value * Math.pow(10, dp)) / Math.pow(10, dp);\r\n    }\r\n    get unit() {\r\n        return this._unit;\r\n    }\r\n    set unit(target) {\r\n        if (this._unit !== target) {\r\n            this.tryConvert(target);\r\n        }\r\n    }\r\n    tryConvert(targetUnit) {\r\n        if (this._unit.converter) {\r\n            if (this._unit.converter.accept(this.unit) === false) {\r\n                return false;\r\n            }\r\n            this.value = this._unit.converter.convert(this.value, targetUnit);\r\n            this._unit = targetUnit;\r\n            return true;\r\n        }\r\n        if (targetUnit.value && targetUnit.symbol !== this._unit.symbol) {\r\n            this.value *= (this._unit.value / targetUnit.value);\r\n            this._unit = targetUnit;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    clone(unit) {\r\n        var n = new (this.constructor(this.value, this._unit));\r\n        if (unit) {\r\n            n.tryConvert(unit);\r\n        }\r\n        return n;\r\n    }\r\n    getValue(unit) {\r\n        if (unit && unit !== this._unit) {\r\n            if (this._unit.converter) {\r\n                if (this._unit.converter.accept(unit)) {\r\n                    return this._unit.converter.convert(this.value, unit);\r\n                }\r\n            }\r\n            if (unit.value && unit.symbol !== this._unit.symbol) {\r\n                return this.value * (this._unit.value / unit.value);\r\n            }\r\n        }\r\n        return this.value;\r\n    }\r\n    equals(v) {\r\n        if (v._unit === this._unit) {\r\n            return this.value === v.value;\r\n        }\r\n        return this.value === v.getValue(this._unit);\r\n    }\r\n    subtract(v) {\r\n        return this.value - ((v._unit === this._unit) ? v.value : v.getValue(this._unit));\r\n    }\r\n    add(v) {\r\n        return this.value + ((v._unit === this._unit) ? v.value : v.getValue(this._unit));\r\n    }\r\n    UnitForSymbol(str) {\r\n        return null;\r\n    }\r\n    tryParse(str) {\r\n        if (str) {\r\n            var parts = str.split(\" \");\r\n            var v = parseFloat(str);\r\n            if (v === NaN) {\r\n                return false;\r\n            }\r\n            this.value = v;\r\n            if (parts.length > 1) {\r\n                this._unit = this.UnitForSymbol(parts[1]);\r\n            }\r\n            else {\r\n                this._unit = null;\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\nexport class QuantityRange extends AbstractRange {\r\n    computeDelta(a, b) {\r\n        return b && a ? b.subtract(a) : 0;\r\n    }\r\n}\r\nexport class Timespan extends Quantity {\r\n    static ForParameter(value, defaultValue, defaultUnit) {\r\n        return value ? new Timespan(value, defaultUnit) : new Timespan(defaultValue, defaultUnit);\r\n    }\r\n    static UnitForSymbol(str) {\r\n        return Timespan.Units[str] || null;\r\n    }\r\n}\r\nTimespan.Units = {\r\n    ys: new Unit(\"yoctosecond\", \"ys\", 10E-24),\r\n    zs: new Unit(\"zeptosecond\", \"zs\", 10E-21),\r\n    as: new Unit(\"attosecond\", \"as\", 10E-18),\r\n    fs: new Unit(\"femtosecond\", \"fs\", 10E-15),\r\n    ps: new Unit(\"picosecond\", \"ps\", 10E-12),\r\n    ns: new Unit(\"nanosecond\", \"ns\", 10E-9),\r\n    tick: new Unit(\"tick\", \"ns\", 10E-7),\r\n    mis: new Unit(\"microsecond\", \"mis\", 10E-6),\r\n    ms: new Unit(\"millisecond\", \"ms\", 10E-3),\r\n    s: new Unit(\"second\", \"s\", 1),\r\n    Min: new Unit(\"minute\", \"m\", 60),\r\n    Hour: new Unit(\"hour\", \"h\", 3600),\r\n    Day: new Unit(\"day\", \"d\", 86400),\r\n    Week: new Unit(\"week\", \"w\", 86400 * 7),\r\n    Yr: new Unit(\"year\", \"y\", 86400 * 365.25),\r\n    Cy: new Unit(\"century\", \"c\", 86400 * 36525)\r\n};\r\n// tslint:disable: no-use-before-declare\r\nclass KConverter {\r\n    accept(unit) { return unit === Temperature.Units.c || unit === Temperature.Units.f; }\r\n    convert(value, unit) {\r\n        switch (unit) {\r\n            case (Temperature.Units.c): return value - Temperature.Units.k.value;\r\n            case (Temperature.Units.f): return (value - Temperature.Units.k.value) * 1.8 + 32.;\r\n            default: return value;\r\n        }\r\n    }\r\n}\r\nclass CConverter {\r\n    accept(unit) { return unit === Temperature.Units.k || unit === Temperature.Units.f; }\r\n    convert(value, unit) {\r\n        switch (unit) {\r\n            case (Temperature.Units.k): return value + Temperature.Units.k.value;\r\n            case (Temperature.Units.f): return value * 1.8 + 32;\r\n            default: return value;\r\n        }\r\n    }\r\n}\r\nclass FConverter {\r\n    accept(unit) { return unit === Temperature.Units.k || unit === Temperature.Units.c; }\r\n    convert(value, unit) {\r\n        switch (unit) {\r\n            case (Temperature.Units.k): return ((value - 32) / 1.8) + Temperature.Units.k.value;\r\n            case (Temperature.Units.c): return (value - 32) / 1.8;\r\n            default: return value;\r\n        }\r\n    }\r\n}\r\nexport class Temperature extends Quantity {\r\n    static ForParameter(value, defaultValue, defaultUnit) {\r\n        return value ? new Temperature(value, defaultUnit) : new Temperature(defaultValue, defaultUnit);\r\n    }\r\n    static UnitForSymbol(str) {\r\n        return Temperature.Units[str] || null;\r\n    }\r\n}\r\nTemperature.Units = {\r\n    k: new Unit(\"kelvin\", \"k\", -273.15, new KConverter()),\r\n    c: new Unit(\"celsius\", \"c\", 1, new CConverter()),\r\n    f: new Unit(\"fahrenheit\", \"f\", 33.8, new FConverter())\r\n};\r\nexport class Mass extends Quantity {\r\n    static ForParameter(value, defaultValue, defaultUnit) {\r\n        return value ? new Mass(value, defaultUnit) : new Mass(defaultValue, defaultUnit);\r\n    }\r\n    static UnitForSymbol(str) {\r\n        return Mass.Units[str] || null;\r\n    }\r\n}\r\nMass.Units = {\r\n    u: new Unit(\"atomic mass unit\", \"u\", 1.66E-27),\r\n    pm: new Unit(\"plank mass\", \"pm\", 1E-8),\r\n    mg: new Unit(\"microgram\", \"µg\", 1E-6),\r\n    g: new Unit(\"gram\", \"g\", 1E-3),\r\n    pound: new Unit(\"pound\", \"lb\", 0.45359237),\r\n    kg: new Unit(\"kilogram\", \"kg\", 1),\r\n    T: new Unit(\"Ton\", \"T\", 1000),\r\n    Sm: new Unit(\"solar mass\", \"Sm\", 1.98855E30)\r\n};\r\nexport class Power extends Quantity {\r\n    static ForParameter(value, defaultValue, defaultUnit) {\r\n        return value ? new Power(value, defaultUnit) : new Power(defaultValue, defaultUnit);\r\n    }\r\n    static UnitForSymbol(str) {\r\n        return Power.Units[str] || null;\r\n    }\r\n}\r\nPower.Units = {\r\n    watt: new Unit(\"watt\", \"w\", 1),\r\n    Kwatt: new Unit(\"Kwatt\", \"kw\", 1000)\r\n};\r\nexport class Voltage extends Quantity {\r\n    static ForParameter(value, defaultValue, defaultUnit) {\r\n        return value ? new Voltage(value, defaultUnit) : new Voltage(defaultValue, defaultUnit);\r\n    }\r\n    static UnitForSymbol(str) {\r\n        return Voltage.Units[str] || null;\r\n    }\r\n}\r\nVoltage.Units = {\r\n    volt: new Unit(\"volt\", \"v\", 1)\r\n};\r\nexport class Current extends Quantity {\r\n    static ForParameter(value, defaultValue, defaultUnit) {\r\n        return value ? new Current(value, defaultUnit) : new Current(defaultValue, defaultUnit);\r\n    }\r\n    static UnitForSymbol(str) {\r\n        return Current.Units[str] || null;\r\n    }\r\n}\r\nCurrent.Units = {\r\n    amp: new Unit(\"amp\", \"a\", 1)\r\n};\r\nexport class Luminosity extends Quantity {\r\n    static ForParameter(value, defaultValue, defaultUnit) {\r\n        return value ? new Luminosity(value, defaultUnit) : new Luminosity(defaultValue, defaultUnit);\r\n    }\r\n    static UnitForSymbol(str) {\r\n        return Luminosity.Units[str] || null;\r\n    }\r\n}\r\nLuminosity.Units = {\r\n    watt: new Unit(\"watt\", \"w\", 1),\r\n    Lsun: new Unit(\"solar luminosity\", \"Lsun\", 3.846E26)\r\n};\r\nexport class Volume extends Quantity {\r\n    static ForParameter(value, defaultValue, defaultUnit) {\r\n        return value ? new Volume(value, defaultUnit) : new Volume(defaultValue, defaultUnit);\r\n    }\r\n    static UnitForSymbol(str) {\r\n        return Volume.Units[str] || null;\r\n    }\r\n}\r\nVolume.Units = {\r\n    m3: new Unit(\"cubic meter\", \"m3\", 1)\r\n};\r\nexport class Angle extends Quantity {\r\n    static ForParameter(value, defaultValue, defaultUnit) {\r\n        return value ? new Angle(value, defaultUnit) : new Angle(defaultValue, defaultUnit);\r\n    }\r\n    static UnitForSymbol(str) {\r\n        return Angle.Units[str] || null;\r\n    }\r\n}\r\nAngle.PIBY2 = Math.PI / 2.;\r\nAngle.PIBY4 = Math.PI / 4.;\r\nAngle.DE2RA = Math.PI / 180.;\r\nAngle.RA2DE = 180. / Math.PI;\r\nAngle.DE2RABY2 = Math.PI / 360.;\r\nAngle.Units = {\r\n    d: new Unit(\"degre\", \"d\", 1),\r\n    r: new Unit(\"radian\", \"r\", Angle.RA2DE)\r\n};\r\nexport class Distance extends Quantity {\r\n    static ForParameter(value, defaultValue, defaultUnit) {\r\n        return value ? new Distance(value, defaultUnit) : new Distance(defaultValue, defaultUnit);\r\n    }\r\n    UnitForSymbol(str) {\r\n        return Distance.Units[str] || null;\r\n    }\r\n}\r\nDistance.Units = {\r\n    ym: new Unit(\"yoctometer\", \"ym\", 10E-24),\r\n    zm: new Unit(\"zeptometer\", \"zm\", 10E-21),\r\n    am: new Unit(\"attometer\", \"am\", 10E-18),\r\n    fm: new Unit(\"femtometer\", \"fm\", 10E-15),\r\n    pm: new Unit(\"picometer\", \"pm\", 10E-12),\r\n    nm: new Unit(\"nanometer\", \"nm\", 10E-9),\r\n    mim: new Unit(\"micrometer\", \"mim\", 10E-6),\r\n    mm: new Unit(\"millimeter\", \"mm\", 10E-3),\r\n    cm: new Unit(\"centimeter\", \"cm\", 10E-2),\r\n    dm: new Unit(\"decimeter\", \"dm\", 10E-1),\r\n    m: new Unit(\"meter\", \"m\", 1),\r\n    Mi: new Unit(\"mile\", \"Mi\", 1.609343502101154),\r\n    Nmi: new Unit(\"nmile\", \"Nmi\", 1.8519994270282407189),\r\n    Dam: new Unit(\"decameter\", \"Dm\", 10),\r\n    Hm: new Unit(\"hectometer\", \"Hm\", 100),\r\n    Km: new Unit(\"kilometer\", \"Km\", 1000),\r\n    Sr: new Unit(\"solar radius\", \"Sr\", 6957E5),\r\n    Mm: new Unit(\"megameter\", \"Mn\", 10E6),\r\n    Ls: new Unit(\"light second\", \"Ls\", 299792458),\r\n    Gm: new Unit(\"gigameter\", \"Gm\", 10E9),\r\n    Au: new Unit(\"astronomical unit\", \"Au\", 1.4960E11),\r\n    Tm: new Unit(\"terameter\", \"Tm\", 10E12),\r\n    Pm: new Unit(\"petameter\", \"Pm\", 10E15),\r\n    Ly: new Unit(\"light year\", \"Ly\", 9.4607E15),\r\n    Pc: new Unit(\"parsec\", \"Pc\", 3.0857E16),\r\n    Em: new Unit(\"exameter\", \"Em\", 10E18),\r\n    Zm: new Unit(\"zettameter\", \"Zm\", 10E21),\r\n    Ym: new Unit(\"yottameter\", \"Ym\", 10E24)\r\n};\r\n//# sourceMappingURL=Units.js.map","export * from \"./Events\";\r\nexport * from \"./Math\";\r\nexport * from \"./Units\";\r\nexport * from \"./Color\";\r\nexport * from \"./Geometry/index\";\r\nexport * from \"./Space/index\";\r\nexport * from \"./Babylon/index\";\r\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}